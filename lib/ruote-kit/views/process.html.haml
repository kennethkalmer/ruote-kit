
- # under the MIT license, see LICENSE.txt

- @_uses_fluo = true

%h1
  process
  = @process.wfid

%canvas#fluo

%table.details
  %tr
    %td
      name
    %td
      &= @process.definition_name
      &= @process.definition_revision
  %tr
    %td
      position
    %td
      - @process.position.each do |pos|
        - text = "#{pos[1]} #{pos[2]['task']}"
        - expid = pos.first.split('!').first
        %span{ :onmouseover => "Fluo.highlight('fluo', '#{expid}');", :onmouseout => "Fluo.highlight('fluo');" }
          - if @process.stored_workitems.find { |wi| wi.fei.sid == pos.first }
            = alink(:workitems, pos.first, :text => text)
          - else
            = text
  %tr
    %td
      expressions
    %td
      = alink(:expressions, @process.wfid, :text => @process.expressions.size)
  %tr
    %td
      workitems
    %td
      #{@process.workitems.size} out,
      - text = "#{@process.stored_workitems.size} in storage participant"
      - if @process.stored_workitems.size > 0
        = alink(:workitems, @process.wfid, :text => text)
      - else
        = text
  %tr
    %td
      errors
    %td
      - if @process.errors.size > 0
        = alink(:errors, @process.wfid, :text => @process.errors.size)
      - else
        0
  %tr
    %td
      launch time
    %td
      - if @process.launched_time
        = Time.parse(@process.launched_time).localtime.strftime('%Y/%m/%d %H:%M:%S')
  %tr
    %td
      last active
    %td
      - if @process.last_active
        = Time.parse(@process.last_active).localtime.strftime('%Y/%m/%d %H:%M:%S')
  %tr
    %td
      root exp state
    %td
      = @process.root_expression_state
  %tr
    %td
      tags
    %td
      &= @process.tags.collect { |ta| ta.first }.join(', ')

  %tr
    %td.no_border{ :colspan => 2 }
      &nbsp;
  %tr
    %td
      %form{ :method => 'post' }
        %input{ :type => 'hidden', :name => '_method', :value => 'PUT' }
        - if @process.root_expression_state == 'paused'
          %input{ :type => 'hidden', :name => 'state', :value => 'resuming' }
          %input{ :type => 'submit', :value => 'resume', :onclick => 'return confirm("really resume process ?");' }
        - else
          %input{ :type => 'hidden', :name => 'state', :value => 'paused' }
          %input{ :type => 'submit', :value => 'pause', :onclick => 'return confirm("really pause process ?");' }
    %td
      %span.description
        - if @process.root_expression_state == 'paused'
          PUT /_ruote/processes/#{@process.wfid}?state=resuming
        - else
          PUT /_ruote/processes/#{@process.wfid}?state=paused

  %tr
    %td
      %form{ :method => 'post' }
        %input{ :type => 'hidden', :name => '_method', :value => 'DELETE' }
        %input{ :type => 'submit', :value => 'cancel', :onclick => 'return confirm("really cancel process ?");' }
    %td
      %span.description DELETE /_ruote/processes/#{@process.wfid}
  %tr
    %td
      %form{ :method => 'post' }
        %input{ :type => 'hidden', :name => '_method', :value => 'DELETE' }
        %input{ :type => 'hidden', :name => '_kill', :value => '1' }
        %input{ :type => 'submit', :value => 'kill', :onclick => 'return confirm("really kill process ?");' }
    %td
      %span.description DELETE /_ruote/processes/#{@process.wfid}?_kill=1
  %tr
    %td
      expressions
    %td
      GET
      = alink(:expressions, @process.wfid)
  %tr
    %td
      workitems
    %td
      GET
      = alink(:workitems, @process.wfid)
  %tr
    %td
      errors
    %td
      GET
      = alink(:errors, @process.wfid)
  %tr
    %td
      schedules
    %td
      GET
      = alink(:schedules, @process.wfid)

:javascript

  var proc_rep = #{process_tree(@process)};
  var pins = #{Rufus::Json.encode(@pins)};

  Fluo.renderFlow('fluo', proc_rep, { 'pins': pins });

  Fluo.crop('fluo');
  Fluo.resizeForMaxWidth('fluo', $('body').width() / 2.1);

